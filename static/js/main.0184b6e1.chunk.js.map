{"version":3,"sources":["Helpers/Db.js","Helpers/Constants.js","Components/Feed.js","Components/Feeds.js","Components/List.js","Components/Viewer.js","App.js","serviceWorker.js","index.js"],"names":["DbContext","React","createContext","db_feeds","PouchDB","db_feeds_items","PROXY_PATH","FAVICON_PROVIDER","Feed","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFeedChange","listener","context","changes","since","live","include_docs","on","item","_","indexOf","state","unread","doc","_id","setState","filter","current","alert","loading","id","icon","title","uri","parser","Parser","parseURL","feed","newItems","items","forEach","date","isoDate","pubDate","replace","moment","ts","unix","push","guid","feedId","_this2","desc","contentSnippet","link","bulkDocs","result","ok","uniq","concat","toConsumableArray","map","console","error","_context","t0","cancel","react_default","a","createElement","onClick","className","length","src","alt","substring","Component","contextType","Feeds","handleChange","event","rss","target","value","trim","closeFeed","document","getElementsByClassName","classList","add","addFeed","asyncToGenerator","regenerator_default","mark","_callee","info","base","wrap","prev","next","abrupt","test","sent","fetch","arrayBuffer","then","buffer","binary","slice","Uint8Array","b","String","fromCharCode","imageStr","window","btoa","put","feeds","t1","stop","nextProps","type","ref","c","_input","onChange","placeholder","disabled","Components_Feed","key","List","openFeedList","remove","load","_ref","e","get","warn","_x","_x2","apply","arguments","assign","_this3","emptyView","loadingView","orderedItems","sortBy","o","href","rel","fromNow","Viewer","App","feedsItems","allDocs","persistedItems","rows","persistedFeeds","log","Components_Feeds","Components_List","Components_Viewer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0184b6e1.chunk.js","sourcesContent":["import React   from 'react';\nimport PouchDB from 'pouchdb';\n\nexport const DbContext = React.createContext({\n\tdb_feeds:       new PouchDB('pager_feeds'),\n\tdb_feeds_items: new PouchDB('pager_feeds_items')\n});","// During Development or without using the docker image\n// You can simply use \"https://cors-anywhere.herokuapp.com/\" as PROXY_PATH variable to get around CORS security.\nexport const PROXY_PATH       = 'https://cors-anywhere.herokuapp.com/';\n\nexport const FAVICON_PROVIDER = 'https://s2.googleusercontent.com/s2/favicons?domain_url=';","import _ from 'lodash';\nimport moment from 'moment';\nimport React, { Component } from 'react';\nimport { DbContext } from '../Helpers/Db';\nimport { PROXY_PATH } from '../Helpers/Constants';\nimport Parser from 'rss-parser';\n\nclass Feed extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.listener = null;\n\t\tthis.state    = {\n\t\t\tloading: true,\n\t\t\tid:      this.props.id,\n\t\t\ticon:    this.props.icon,\n\t\t\ttitle:   this.props.title,\n\t\t\turi:     this.props.uri,\n\t\t\tunread:  this.props.unread || []\n\t\t}\n\t}\n\n\tasync componentDidMount() {\n\t\t//Attach listner\n\t\tthis.onFeedChange();\n\n\t\tlet parser = new Parser();\n\t\tlet uri = `${PROXY_PATH}${this.state.uri}`;\n\n\t\ttry {\n\t\t\tlet feed     = await parser.parseURL(uri);\n\t\t\tlet newItems = [];\n\n\t\t\tfeed.items.forEach(item => {\n\n\t\t\t\tlet date = item.isoDate || (item.pubDate) ? item.pubDate.replace(/CET|CEST/gi, '') : moment();\n\t\t\t\tlet ts   = moment(date).unix();\n\n\t\t\t\tnewItems.push({\n\t\t\t\t\t_id:    item.guid || item.id,\n\t\t\t\t\tfeedId: this.state.id,\n\t\t\t\t\ticon:   this.state.icon,\n\t\t\t\t\ttitle:  item.title,\n\t\t\t\t\tdesc:   item.contentSnippet,\n\t\t\t\t\tdate:   ts,\n\t\t\t\t\tlink:   item.link,\n\t\t\t\t\tunread: true\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t//Try to add new document\n\t\t\t//If document already exist coucheDB will fail with conflict\n\t\t\tlet result = await this.context.db_feeds_items.bulkDocs(newItems);\n\t\t\t//Keep only successful new insertion\n\t\t\tresult = result.filter(item => item.ok === true);\n\t\t\tthis.setState({ loading: false, unread: _.uniq([...this.state.unread, ...result.map(item => item.id)]) });\n\t\t} catch(e) {\n\t\t\tconsole.error(`Unable to fetch feed: ${uri} reason: ${e}`);\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.listener.cancel();\n\t\tthis.listener = null;\n\t}\n\n\tonFeedChange = () => {\n\t\t//Attach listener for new feed changes\n\t\tthis.listener = this.context.db_feeds_items.changes({\n\t\t\tsince: 'now',\n\t\t\tlive: true,\n\t\t\tinclude_docs: true\n\t\t}).on('change', (item) => {\n\n\t\t\t//Remove item from unread\n\t\t\tif (_.indexOf(this.state.unread, item.doc._id) !== -1 && item.doc.unread === false) {\n\t\t\t\tthis.setState({unread: this.state.unread.filter(current => current !== item.doc._id)})\n\t\t\t}\n\t\t});\n\t}\n\n\tfilter = () => {\n\t\t//TODO: Filter only this feed\n\t\talert(\"Not implemented.\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<li onClick={this.filter} title={this.state.title}>\n\t\t\t\t<div className=\"n\">{(this.state.loading) ? '...' : this.state.unread.length}</div>\n\t\t\t\t<div className=\"i\"><img src={this.state.icon} alt=\"-\" /></div>\n\t\t\t\t<div className=\"t\">{this.state.title.substring(0, 30)}</div>\n\t\t\t</li>\n\t\t)\n\t}\n}\n\nFeed.contextType = DbContext;\nexport default Feed;","import React, { Component } from 'react';\nimport { DbContext } from '../Helpers/Db';\nimport { PROXY_PATH, FAVICON_PROVIDER } from '../Helpers/Constants';\nimport Parser from 'rss-parser';\nimport Feed from './Feed';\n\nclass Feeds extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\trss:     '',\n\t\t\tloading: false,\n\t\t\tfeeds:   this.props.feeds,\n\t\t}\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tif (nextProps.feeds !== this.props.feeds) {\n\t\t\tthis.setState({ feeds: nextProps.feeds });\n\t\t}\n\t}\n\n\thandleChange = (event) => {\n\t\tthis.setState({rss: event.target.value.trim()});\n\t}\n\n\tcloseFeed = () => {\n\t\t// Hide feeds list\n\t\tdocument.getElementsByClassName('App-Feeds')[0].classList.add(\"hide\");\n\t}\n\n\taddFeed = async () => {\n\t\t// Test feed validity\n\t\tif (this.state.rss === \"\") {\n\t\t\talert(\"Please add rss feed link first.\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (!/^(http|https):\\/\\//.test(this.state.rss)) {\n\t\t\talert(\"Missing http/https scheme.\");\n\t\t\treturn;\n\t\t}\n\n\t\t// Loader\n\t\tthis.setState({ loading: true });\n\n\t\tlet feed = {\n\t\t\t_id:   this.state.rss,\n\t\t\turi:   this.state.rss,\n\t\t\ttitle: this.state.rss,\n\t\t\ticon:  ''\n\t\t};\n\n\t\t//Trying to fetch xml feed\n\t\ttry {\n\t\t\tlet parser = new Parser();\n\t\t\tlet uri = `${PROXY_PATH}${this.state.rss}`;\n\n\t\t\tlet info = await parser.parseURL(uri);\n\t\t\tif (info.title) {\n\t\t\t\t//Add feed title\n\t\t\t\tfeed.title = info.title;\n\t\t\t}\n\n\t\t\t//Use google as favicon provider (o_O)\n\t\t\tlet base = info.link || this.state.rss;\n\t\t\tlet icon = await fetch(`${PROXY_PATH}${FAVICON_PROVIDER}${base}`);\n\t\t\tawait icon.arrayBuffer().then((buffer) => {\n\t\t\t\t//Read stream\n\t\t\t\tvar binary     = '';\n\t\t\t\tvar bytes      = [].slice.call(new Uint8Array(buffer));\n\t\t\t\t\tbytes.forEach((b) => binary += String.fromCharCode(b));\n\t\t\t\tvar imageStr   = window.btoa(binary);\n\n\t\t\t\t//Save icon as base64\n\t\t\t\tfeed.icon = `data:image/png;base64,${imageStr}`;\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tthis.setState({ loading: false });\n\t\t\tconsole.error(`Unable to add feed: ${this.state.rss} reason: ${e}`);\n\t\t\talert(\"Ooops something goes wrong..\");\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.context.db_feeds.put(feed);\n\t\t\tthis.setState({\n\t\t\t\tloading: false,\n\t\t\t\trss:     '',\n\t\t\t\tfeeds:   [...this.state.feeds, ...[feed]]\n\t\t\t});\n\t\t} catch(e) {\n\t\t\tthis.setState({ loading: false });\n\t\t\tconsole.error(`Unable to add feed: ${this.state.rss} reason: ${e}`);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App-Feeds hide\">\n\t\t\t\t<h1><img src=\"/favicon.png\" /> <span className=\"App-Feeds-Toggle\" onClick={this.closeFeed}>x</span></h1>\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"App-Feeds-Input\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tref={c => (this._input = c)}\n\t\t\t\t\tvalue={this.state.rss}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tplaceholder=\"Add rss feed link here..\"\n\t\t\t\t/>\n\n\t\t\t\t{this.state.loading ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\tdisabled\n\t\t\t\t\t\tclassName=\"App-Feeds-Add\">\n\t\t\t\t\t\tLOADING...\n\t\t\t\t\t</button>\n\t\t\t\t) : (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"App-Feeds-Add\"\n\t\t\t\t\t\tonClick={this.addFeed}>\n\t\t\t\t\t\tADD (+)\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n\t\t\t\t<ul>\n\t\t\t\t\t{this.state.feeds.map((feed) => (\n\t\t\t\t\t\t<Feed key={feed._id} id={feed._id} icon={feed.icon} title={feed.title} uri={feed.uri} unread={feed.unread} />\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nFeeds.contextType = DbContext;\nexport default Feeds;","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { DbContext } from '../Helpers/Db';\n\nclass List extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.listener = null;\n\t\tthis.state    = {\n\t\t\tloading: true,\n\t\t\titems:   this.props.items\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\t//Attach listener for new feed changes\n\t\tthis.listener = this.context.db_feeds_items.changes({\n\t\t\tsince:        'now',\n\t\t\tlive:         true,\n\t\t\tinclude_docs: true\n\t\t}).on('change', (item) => {\n\t\t\t//TODO: Improve mark as read should not trigger full render\n\n\t\t\t//Is this item already exist\n\t\t\tlet isExist = this.state.items.filter(current => current._id === item.doc._id);\n\t\t\tif (isExist.length > 0) {\n\t\t\t\t//Update existing item\n\t\t\t\tthis.setState({ items: this.state.items.map(current => (\n\t\t\t\t\tcurrent._id === item.doc._id ? Object.assign({}, current, item.doc) : current\n\t\t\t\t))});\n\t\t\t} else {\n\t\t\t\t//Add new item to feed list\n\t\t\t\tthis.setState({ items: [...this.state.items, ...[item.doc]] });\n\t\t\t}\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.listener.cancel();\n\t\tthis.listener = null;\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tif (nextProps.items !== this.props.items) {\n\t\t\tthis.setState({ loading: false, items: nextProps.items });\n\t\t}\n\t}\n\n\topenFeedList = () => {\n\t\tdocument.getElementsByClassName('App-Feeds')[0].classList.remove(\"hide\");\n\t}\n\n\t// Open link target in a new tab or inside the embeded viewer\n\tload = async (e, item) => {\n\t\tif (false) {\n\t\t\t//TODO: Dismiss default action and open it in embeded viewer\n\t\t\te.preventDefault();\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\t//Mark as read\n\t\t\tvar item = await this.context.db_feeds_items.get(item._id);\n\t\t\t\titem.unread = false;\n\n\t\t\tawait this.context.db_feeds_items.put(item);\n\t\t} catch(e) {\n\t\t\tconsole.warn(`Unable to mark as read item: ${item._id} reason: ${e}`);\n\t\t}\n\t}\n\n\trender() {\n\t\tlet emptyView = (\n\t\t\t<div className=\"App-List-Empty\">\n\t\t\t\t<h1>(o_O)</h1>\n\t\t\t\t<p>There is nothing to see right now..</p>\n\t\t\t</div>\n\t\t);\n\t\tlet loadingView = (\n\t\t\t<div className=\"App-List-Empty\">\n\t\t\t\t<p>loading...</p>\n\t\t\t</div>\n\t\t);\n\n\n\t\t//Order by date DESC\n\t\tlet orderedItems = _.sortBy(this.state.items, [(o) => { return -o.date }]);\n\n\t\treturn (\n\t\t\t<div className=\"App-List\">\n\t\t\t\t<div className=\"App-List-Options\">\n\t\t\t\t\t<button onClick={this.openFeedList}>Feeds</button>\n\t\t\t\t</div>\n\t\t\t\t<ul>\n\t\t\t\t\t{orderedItems.map((item) => (\n\t\t\t\t\t\t<a key={item._id} href={item.link} onClick={(e) => this.load(e, item)} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\t\t<li className={item.unread ? 'unread' : ''}>\n\t\t\t\t\t\t\t\t<div className=\"i\"><img src={item.icon} /></div>\n\t\t\t\t\t\t\t\t<div className=\"ts\">{moment.unix(item.date).fromNow(true)}</div>\n\t\t\t\t\t\t\t\t<div className=\"t\">{(item.title) ? item.title.substring(0, 150) : ''}</div>\n\t\t\t\t\t\t\t\t<div className=\"d\">{(item.desc) ? item.desc.substring(0, 180) : ''}...</div>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\n\t\t\t\t{(this.state.loading === true) && loadingView}\n\t\t\t\t{(this.state.loading === false && orderedItems.length === 0) && emptyView}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nList.contextType = DbContext;\nexport default List;","import React, { Component } from 'react';\n\nclass Viewer extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App-Viewer\">\n\t\t\t\t<div></div>\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nexport default Viewer;","import React, { Component } from 'react';\nimport { DbContext } from './Helpers/Db';\nimport './App.scss';\n\n//Components\nimport Feeds  from './Components/Feeds';\nimport List   from './Components/List';\nimport Viewer from './Components/Viewer';\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tloading:    true,\n\t\t\tfeeds:      [ ],\n\t\t\tfeedsItems: [ ]\n\t\t}\n\t}\n\n\tasync componentDidMount() {\n\t\t//Initialize persisted feeds items\n\t\tlet persistedItems = await this.context.db_feeds_items.allDocs({ include_docs: true });\n\t\t\tpersistedItems = persistedItems.rows.filter((item) => item.doc.unread === true);\n\t\t\tpersistedItems = persistedItems.map(item => item.doc);\n\n\t\t//Initialize persisted feeds\n\t\tlet persistedFeeds = await this.context.db_feeds.allDocs({ include_docs: true });\n\t\t\tpersistedFeeds = persistedFeeds.rows.map(feed => {\n\t\t\t\tfeed.doc.unread = persistedItems.filter((item) => item.feedId === feed.id);\n\t\t\t\tfeed.doc.unread = feed.doc.unread.map(item => item._id);\n\n\t\t\t\tconsole.log(`Feed ${feed.id} has ${feed.doc.unread.length} unread.`);\n\t\t\t\treturn feed.doc;\n\t\t\t});\n\n\t\tthis.setState({\n\t\t\tloading:    false,\n\t\t\tfeeds:      [...persistedFeeds],\n\t\t\tfeedsItems: [...persistedItems]\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Feeds feeds={this.state.feeds} />\n\t\t\t\t<List  items={this.state.feedsItems} />\n\t\t\t\t<Viewer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nApp.contextType = DbContext;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}